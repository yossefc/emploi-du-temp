{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\nconst initialState = {\n  messages: [],\n  suggestions: [],\n  isProcessing: false,\n  error: null,\n  currentContext: null\n};\n\n// Async thunks\nexport const sendMessage = createAsyncThunk('ai/sendMessage', async ({\n  message,\n  context\n}) => {\n  const response = await api.sendAIMessage(message, context);\n  return response.data;\n});\nexport const parseConstraints = createAsyncThunk('ai/parseConstraints', async text => {\n  const response = await api.parseConstraints(text);\n  return response.data;\n});\nexport const fetchSuggestions = createAsyncThunk('ai/fetchSuggestions', async scheduleId => {\n  const response = await api.getSuggestions(scheduleId);\n  return response.data;\n});\nexport const explainConflict = createAsyncThunk('ai/explainConflict', async conflictId => {\n  const response = await api.explainConflict(conflictId);\n  return response.data;\n});\nconst aiSlice = createSlice({\n  name: 'ai',\n  initialState,\n  reducers: {\n    addMessage: (state, action) => {\n      state.messages.push(action.payload);\n    },\n    clearMessages: state => {\n      state.messages = [];\n    },\n    setContext: (state, action) => {\n      state.currentContext = action.payload;\n    },\n    clearError: state => {\n      state.error = null;\n    },\n    removeSuggestion: (state, action) => {\n      state.suggestions = state.suggestions.filter(s => s.id !== action.payload);\n    }\n  },\n  extraReducers: builder => {\n    // Send message\n    builder.addCase(sendMessage.pending, state => {\n      state.isProcessing = true;\n      state.error = null;\n    }).addCase(sendMessage.fulfilled, (state, action) => {\n      state.isProcessing = false;\n\n      // Ajouter le message de l'IA\n      const aiMessage = {\n        id: Date.now().toString(),\n        text: action.payload.message,\n        sender: 'ai',\n        timestamp: new Date(),\n        suggestions: action.payload.suggestions\n      };\n      state.messages.push(aiMessage);\n\n      // Mettre à jour le contexte si fourni\n      if (action.payload.context) {\n        state.currentContext = action.payload.context;\n      }\n    }).addCase(sendMessage.rejected, (state, action) => {\n      state.isProcessing = false;\n      state.error = action.error.message || 'Failed to send message';\n    });\n\n    // Parse constraints\n    builder.addCase(parseConstraints.pending, state => {\n      state.isProcessing = true;\n      state.error = null;\n    }).addCase(parseConstraints.fulfilled, (state, action) => {\n      state.isProcessing = false;\n\n      // Ajouter un message de confirmation\n      const confirmMessage = {\n        id: Date.now().toString(),\n        text: `J'ai identifié ${action.payload.constraints.length} contraintes dans votre texte.`,\n        sender: 'ai',\n        timestamp: new Date()\n      };\n      state.messages.push(confirmMessage);\n    }).addCase(parseConstraints.rejected, (state, action) => {\n      state.isProcessing = false;\n      state.error = action.error.message || 'Failed to parse constraints';\n    });\n\n    // Fetch suggestions\n    builder.addCase(fetchSuggestions.pending, state => {\n      state.isProcessing = true;\n      state.error = null;\n    }).addCase(fetchSuggestions.fulfilled, (state, action) => {\n      state.isProcessing = false;\n      state.suggestions = action.payload;\n    }).addCase(fetchSuggestions.rejected, (state, action) => {\n      state.isProcessing = false;\n      state.error = action.error.message || 'Failed to fetch suggestions';\n    });\n\n    // Explain conflict\n    builder.addCase(explainConflict.fulfilled, (state, action) => {\n      // Ajouter l'explication comme message\n      const explanationMessage = {\n        id: Date.now().toString(),\n        text: action.payload.explanation,\n        sender: 'ai',\n        timestamp: new Date(),\n        suggestions: action.payload.suggestions\n      };\n      state.messages.push(explanationMessage);\n    });\n  }\n});\nexport const {\n  addMessage,\n  clearMessages,\n  setContext,\n  clearError,\n  removeSuggestion\n} = aiSlice.actions;\nexport default aiSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","initialState","messages","suggestions","isProcessing","error","currentContext","sendMessage","message","context","response","sendAIMessage","data","parseConstraints","text","fetchSuggestions","scheduleId","getSuggestions","explainConflict","conflictId","aiSlice","name","reducers","addMessage","state","action","push","payload","clearMessages","setContext","clearError","removeSuggestion","filter","s","id","extraReducers","builder","addCase","pending","fulfilled","aiMessage","Date","now","toString","sender","timestamp","rejected","confirmMessage","constraints","length","explanationMessage","explanation","actions","reducer"],"sources":["C:/Users/yossef/OneDrive/Desktop/emploi du temp/frontend/src/store/slices/aiSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction, ActionReducerMapBuilder } from '@reduxjs/toolkit';\r\nimport api from '../../services/api';\r\n\r\ninterface AIMessage {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'ai';\r\n  timestamp: Date;\r\n  suggestions?: string[];\r\n}\r\n\r\ninterface Suggestion {\r\n  id: number;\r\n  type: 'constraint' | 'optimization' | 'conflict';\r\n  description: string;\r\n  priority: 'high' | 'medium' | 'low';\r\n  action?: any;\r\n}\r\n\r\ninterface AIState {\r\n  messages: AIMessage[];\r\n  suggestions: Suggestion[];\r\n  isProcessing: boolean;\r\n  error: string | null;\r\n  currentContext: any;\r\n}\r\n\r\nconst initialState: AIState = {\r\n  messages: [],\r\n  suggestions: [],\r\n  isProcessing: false,\r\n  error: null,\r\n  currentContext: null,\r\n};\r\n\r\n// Async thunks\r\nexport const sendMessage = createAsyncThunk(\r\n  'ai/sendMessage',\r\n  async ({ message, context }: { message: string; context?: any }) => {\r\n    const response = await api.sendAIMessage(message, context);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const parseConstraints = createAsyncThunk(\r\n  'ai/parseConstraints',\r\n  async (text: string) => {\r\n    const response = await api.parseConstraints(text);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const fetchSuggestions = createAsyncThunk(\r\n  'ai/fetchSuggestions',\r\n  async (scheduleId: number) => {\r\n    const response = await api.getSuggestions(scheduleId);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const explainConflict = createAsyncThunk(\r\n  'ai/explainConflict',\r\n  async (conflictId: number) => {\r\n    const response = await api.explainConflict(conflictId);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nconst aiSlice = createSlice({\r\n  name: 'ai',\r\n  initialState,\r\n  reducers: {\r\n    addMessage: (state: AIState, action: PayloadAction<AIMessage>) => {\r\n      state.messages.push(action.payload);\r\n    },\r\n    clearMessages: (state: AIState) => {\r\n      state.messages = [];\r\n    },\r\n    setContext: (state: AIState, action: PayloadAction<any>) => {\r\n      state.currentContext = action.payload;\r\n    },\r\n    clearError: (state: AIState) => {\r\n      state.error = null;\r\n    },\r\n    removeSuggestion: (state: AIState, action: PayloadAction<number>) => {\r\n      state.suggestions = state.suggestions.filter((s: Suggestion) => s.id !== action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder: ActionReducerMapBuilder<AIState>) => {\r\n    // Send message\r\n    builder\r\n      .addCase(sendMessage.pending, (state: AIState) => {\r\n        state.isProcessing = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(sendMessage.fulfilled, (state: AIState, action: PayloadAction<any>) => {\r\n        state.isProcessing = false;\r\n        \r\n        // Ajouter le message de l'IA\r\n        const aiMessage: AIMessage = {\r\n          id: Date.now().toString(),\r\n          text: action.payload.message,\r\n          sender: 'ai',\r\n          timestamp: new Date(),\r\n          suggestions: action.payload.suggestions,\r\n        };\r\n        state.messages.push(aiMessage);\r\n        \r\n        // Mettre à jour le contexte si fourni\r\n        if (action.payload.context) {\r\n          state.currentContext = action.payload.context;\r\n        }\r\n      })\r\n      .addCase(sendMessage.rejected, (state: AIState, action: any) => {\r\n        state.isProcessing = false;\r\n        state.error = action.error.message || 'Failed to send message';\r\n      });\r\n\r\n    // Parse constraints\r\n    builder\r\n      .addCase(parseConstraints.pending, (state: AIState) => {\r\n        state.isProcessing = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(parseConstraints.fulfilled, (state: AIState, action: PayloadAction<any>) => {\r\n        state.isProcessing = false;\r\n        \r\n        // Ajouter un message de confirmation\r\n        const confirmMessage: AIMessage = {\r\n          id: Date.now().toString(),\r\n          text: `J'ai identifié ${action.payload.constraints.length} contraintes dans votre texte.`,\r\n          sender: 'ai',\r\n          timestamp: new Date(),\r\n        };\r\n        state.messages.push(confirmMessage);\r\n      })\r\n      .addCase(parseConstraints.rejected, (state: AIState, action: any) => {\r\n        state.isProcessing = false;\r\n        state.error = action.error.message || 'Failed to parse constraints';\r\n      });\r\n\r\n    // Fetch suggestions\r\n    builder\r\n      .addCase(fetchSuggestions.pending, (state: AIState) => {\r\n        state.isProcessing = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchSuggestions.fulfilled, (state: AIState, action: PayloadAction<Suggestion[]>) => {\r\n        state.isProcessing = false;\r\n        state.suggestions = action.payload;\r\n      })\r\n      .addCase(fetchSuggestions.rejected, (state: AIState, action: any) => {\r\n        state.isProcessing = false;\r\n        state.error = action.error.message || 'Failed to fetch suggestions';\r\n      });\r\n\r\n    // Explain conflict\r\n    builder\r\n      .addCase(explainConflict.fulfilled, (state: AIState, action: PayloadAction<any>) => {\r\n        // Ajouter l'explication comme message\r\n        const explanationMessage: AIMessage = {\r\n          id: Date.now().toString(),\r\n          text: action.payload.explanation,\r\n          sender: 'ai',\r\n          timestamp: new Date(),\r\n          suggestions: action.payload.suggestions,\r\n        };\r\n        state.messages.push(explanationMessage);\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  addMessage,\r\n  clearMessages,\r\n  setContext,\r\n  clearError,\r\n  removeSuggestion,\r\n} = aiSlice.actions;\r\n\r\nexport default aiSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}