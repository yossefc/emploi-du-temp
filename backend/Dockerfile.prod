# =============================================================================
# Production-optimized multi-stage build for School Timetable Generator Backend
# =============================================================================

# Stage 1: Build dependencies
FROM python:3.11-slim as dependencies

# Set environment variables for build stage
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies required for building
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    gcc \
    g++ \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
WORKDIR /app
COPY requirements.txt .
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip uninstall -y pip setuptools

# Stage 2: Security scanning (optional)
FROM dependencies as security
RUN pip install safety bandit
COPY . .
RUN safety check --json --output safety-report.json || true
RUN bandit -r app/ -f json -o bandit-report.json || true

# Stage 3: Runtime image
FROM python:3.11-slim as runtime

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    postgresql-client \
    curl \
    dumb-init \
    tini \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Create non-root user with minimal privileges
RUN groupadd -r appgroup && \
    useradd -r -g appgroup -u 1000 -m -s /sbin/nologin -c "App User" appuser

# Copy virtual environment from dependencies stage
COPY --from=dependencies /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=appuser:appgroup . .

# Remove unnecessary files for production
RUN rm -rf tests/ docs/ scripts/ *.md \
    requirements-dev.txt pytest.ini \
    .pytest_cache/ .coverage

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/uploads /app/exports /tmp/app && \
    chown -R appuser:appgroup /app /tmp/app && \
    chmod -R 755 /app && \
    chmod -R 700 /app/logs /app/uploads /app/exports

# Set secure file permissions
RUN find /app -type f -exec chmod 644 {} \; && \
    find /app -type d -exec chmod 755 {} \; && \
    chmod +x /app/scripts/* 2>/dev/null || true

# Switch to non-root user
USER appuser

# Set production environment
ENV PYTHONPATH=/app \
    ENVIRONMENT=production \
    DEBUG=false

# Expose port
EXPOSE 8000

# Add comprehensive health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Use tini as init system for proper signal handling
ENTRYPOINT ["tini", "--"]

# Production command with optimized settings
CMD ["gunicorn", "app.main:app", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--workers", "4", \
     "--bind", "0.0.0.0:8000", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "50", \
     "--timeout", "30", \
     "--keep-alive", "2", \
     "--log-level", "info", \
     "--access-logfile", "-", \
     "--error-logfile", "-"]

# =============================================================================
# Labels pour metadata
# =============================================================================
LABEL maintainer="School Team <team@school.com>" \
      version="1.0.0" \
      description="Ã‰cole Emploi du Temps - API Backend" \
      org.opencontainers.image.title="School Timetable API" \
      org.opencontainers.image.description="API backend pour la gestion d'emplois du temps scolaires" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.vendor="School Team" \
      org.opencontainers.image.licenses="MIT" 