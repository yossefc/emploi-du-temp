#!/usr/bin/env python3
"""
Script pour peupler la base de donn√©es avec des donn√©es de test r√©alistes
pour l'application de g√©n√©ration d'emplois du temps scolaires isra√©liens.
"""

import sys
import os
from pathlib import Path
import argparse
from typing import Optional

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent.parent))

from sqlalchemy.orm import Session
from app.db.base import SessionLocal, engine
from app.db.init_data import populate_test_data, clear_all_data
from app.core.config import settings


def get_db_session() -> Session:
    """Obtenir une session de base de donn√©es."""
    return SessionLocal()


def check_database_connection():
    """V√©rifier la connexion √† la base de donn√©es."""
    try:
        from sqlalchemy import text
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        return False


def show_current_data_stats(db: Session):
    """Afficher les statistiques actuelles des donn√©es."""
    from sqlalchemy import text
    
    print("\nüìä √âtat actuel de la base de donn√©es:")
    
    tables = [
        ("users", "Utilisateurs"),
        ("teachers", "Enseignants"), 
        ("subjects", "Mati√®res"),
        ("class_groups", "Classes"),
        ("rooms", "Salles"),
        ("teacher_subjects", "Associations enseignants-mati√®res"),
        ("teacher_availabilities", "Disponibilit√©s"),
        ("class_subject_requirements", "Exigences par classe"),
        ("global_constraints", "Contraintes globales")
    ]
    
    for table_name, display_name in tables:
        try:
            result = db.execute(text(f"SELECT COUNT(*) FROM {table_name}"))
            count = result.scalar()
            status = "‚úÖ" if count > 0 else "üîµ"
            print(f"   {status} {display_name}: {count}")
        except Exception as e:
            print(f"   ‚ùå {display_name}: Erreur ({e})")


def confirm_action(action: str) -> bool:
    """Demander confirmation pour une action."""
    response = input(f"\n‚ö†Ô∏è  √ätes-vous s√ªr de vouloir {action} ? (oui/non): ").lower().strip()
    return response in ["oui", "o", "yes", "y"]


def populate_data_interactive(db: Session):
    """Peupler les donn√©es en mode interactif."""
    print("üè´ PEUPLEMENT DES DONN√âES DE TEST")
    print("=" * 50)
    
    # Afficher l'√©tat actuel
    show_current_data_stats(db)
    
    # Demander confirmation
    if not confirm_action("cr√©er les donn√©es de test"):
        print("‚ùå Op√©ration annul√©e")
        return False
    
    try:
        # Peupler les donn√©es
        print("\nüöÄ D√©but du peuplement...")
        stats = populate_test_data(db)
        
        print("\n" + "=" * 50)
        print("‚úÖ DONN√âES DE TEST CR√â√âES AVEC SUCC√àS !")
        print("\nüìà R√©sum√©:")
        for key, value in stats.items():
            print(f"   ‚Ä¢ {key.replace('_', ' ').title()}: {value}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du peuplement: {e}")
        db.rollback()
        return False


def clear_data_interactive(db: Session):
    """Vider les donn√©es en mode interactif."""
    print("üßπ SUPPRESSION DE TOUTES LES DONN√âES")
    print("=" * 50)
    
    # Afficher l'√©tat actuel
    show_current_data_stats(db)
    
    # Double confirmation pour la suppression
    if not confirm_action("SUPPRIMER TOUTES LES DONN√âES"):
        print("‚ùå Op√©ration annul√©e")
        return False
    
    print("\n‚ö†Ô∏è  ATTENTION: Cette action est IRR√âVERSIBLE!")
    if not confirm_action("continuer la suppression"):
        print("‚ùå Op√©ration annul√©e")
        return False
    
    try:
        # Vider les donn√©es
        print("\nüóëÔ∏è  Suppression en cours...")
        clear_all_data(db)
        
        print("‚úÖ Toutes les donn√©es ont √©t√© supprim√©es !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la suppression: {e}")
        db.rollback()
        return False


def reset_and_populate(db: Session):
    """Vider et repeupler les donn√©es."""
    print("üîÑ R√âINITIALISATION COMPL√àTE")
    print("=" * 50)
    
    # Afficher l'√©tat actuel
    show_current_data_stats(db)
    
    # Demander confirmation
    if not confirm_action("r√©initialiser compl√®tement la base de donn√©es"):
        print("‚ùå Op√©ration annul√©e")
        return False
    
    try:
        # 1. Vider les donn√©es
        print("\nüßπ Suppression des donn√©es existantes...")
        clear_all_data(db)
        
        # 2. Peupler avec de nouvelles donn√©es
        print("\nüèóÔ∏è  Cr√©ation des nouvelles donn√©es...")
        stats = populate_test_data(db)
        
        print("\n" + "=" * 50)
        print("‚úÖ R√âINITIALISATION TERMIN√âE !")
        print("\nüìà Nouvelles donn√©es:")
        for key, value in stats.items():
            print(f"   ‚Ä¢ {key.replace('_', ' ').title()}: {value}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la r√©initialisation: {e}")
        db.rollback()
        return False


def main():
    """Fonction principale."""
    parser = argparse.ArgumentParser(
        description="Gestionnaire de donn√©es de test pour l'√©cole isra√©lienne"
    )
    parser.add_argument(
        "action",
        choices=["populate", "clear", "reset", "stats"],
        help="Action √† effectuer"
    )
    parser.add_argument(
        "--force",
        action="store_true",
        help="Forcer l'action sans demander confirmation"
    )
    
    args = parser.parse_args()
    
    # V√©rifier la connexion
    print("üîç V√©rification de la connexion √† la base de donn√©es...")
    print(f"   Database URL: {settings.DATABASE_URL}")
    
    if not check_database_connection():
        sys.exit(1)
    
    print("‚úÖ Connexion r√©ussie !")
    
    # Obtenir une session
    db = get_db_session()
    
    try:
        if args.action == "stats":
            # Afficher uniquement les statistiques
            show_current_data_stats(db)
            
        elif args.action == "populate":
            # Peupler les donn√©es
            if args.force:
                stats = populate_test_data(db)
                print(f"‚úÖ Donn√©es cr√©√©es: {stats}")
            else:
                populate_data_interactive(db)
                
        elif args.action == "clear":
            # Vider les donn√©es
            if args.force:
                clear_all_data(db)
                print("‚úÖ Donn√©es supprim√©es")
            else:
                clear_data_interactive(db)
                
        elif args.action == "reset":
            # R√©initialiser (vider + peupler)
            if args.force:
                clear_all_data(db)
                stats = populate_test_data(db)
                print(f"‚úÖ Base r√©initialis√©e: {stats}")
            else:
                reset_and_populate(db)
    
    except KeyboardInterrupt:
        print("\n‚ùå Op√©ration interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1)
    finally:
        db.close()


if __name__ == "__main__":
    main() 