# =============================================================================
# Docker Compose Configuration for School Timetable Generator
# Development Environment
# =============================================================================

# Define custom networks for service isolation
networks:
  frontend_network:
    driver: bridge
  backend_network:
    driver: bridge
  database_network:
    driver: bridge

# Define persistent volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: school_timetable_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-school_timetable}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init_db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./backend/scripts/seed_data.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - database_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-school_timetable}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis for caching and Celery message broker
  redis:
    image: redis:7-alpine
    container_name: school_timetable_redis
    restart: unless-stopped
    environment:
      REDIS_MAXMEMORY: ${REDIS_MAXMEMORY:-256mb}
      REDIS_MAXMEMORY_POLICY: ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    command: redis-server /usr/local/etc/redis/redis.conf

  # =============================================================================
  # BACKEND SERVICES
  # =============================================================================

  # FastAPI Backend Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: school_timetable_backend
    restart: unless-stopped
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-school_timetable}
      
      # Redis configuration
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      
      # Application configuration
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      DEBUG: ${DEBUG:-true}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # CORS configuration
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-["http://localhost:3000","http://127.0.0.1:3000","http://localhost:80"]}
      
      # AI configuration
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      USE_CLAUDE: ${USE_CLAUDE:-true}
      AI_MODEL: ${AI_MODEL:-claude-3-opus-20240229}
      
      # Israeli settings
      FRIDAY_SHORT_DAY: ${FRIDAY_SHORT_DAY:-true}
      FRIDAY_END_HOUR: ${FRIDAY_END_HOUR:-13}
      REGULAR_END_HOUR: ${REGULAR_END_HOUR:-16}
      START_HOUR: ${START_HOUR:-8}
      
      # Solver settings
      SOLVER_TIME_LIMIT_SECONDS: ${SOLVER_TIME_LIMIT_SECONDS:-300}
      SOLVER_NUM_WORKERS: ${SOLVER_NUM_WORKERS:-8}
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - backend_network
      - database_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker for background tasks
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: school_timetable_celery_worker
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-school_timetable}
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      C_FORCE_ROOT: "true"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - backend_network
      - database_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=4

  # Celery Beat for scheduled tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: school_timetable_celery_beat
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-school_timetable}
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - backend_network
      - database_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: celery -A app.core.celery_app beat --loglevel=info

  # Flower for Celery monitoring
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: school_timetable_flower
    restart: unless-stopped
    environment:
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: ${FLOWER_BASIC_AUTH:-admin:password}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    networks:
      - backend_network
    depends_on:
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: celery -A app.core.celery_app flower --port=5555

  # =============================================================================
  # FRONTEND SERVICES
  # =============================================================================

  # React Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: school_timetable_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000/api/v1}
      REACT_APP_WEBSOCKET_URL: ${REACT_APP_WEBSOCKET_URL:-ws://localhost:8000/ws}
      REACT_APP_ENVIRONMENT: ${ENVIRONMENT:-development}
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - frontend_network
    depends_on:
      - backend
    command: npm run dev

  # =============================================================================
  # REVERSE PROXY & LOAD BALANCER
  # =============================================================================

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: school_timetable_nginx
    restart: unless-stopped
    environment:
      NGINX_BACKEND_HOST: backend
      NGINX_BACKEND_PORT: 8000
      NGINX_FRONTEND_HOST: frontend
      NGINX_FRONTEND_PORT: 3000
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - ./frontend/dist:/usr/share/nginx/html:ro
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - frontend_network
      - backend_network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: >
      sh -c "envsubst '$$NGINX_BACKEND_HOST $$NGINX_BACKEND_PORT $$NGINX_FRONTEND_HOST $$NGINX_FRONTEND_PORT' 
      < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && 
      nginx -g 'daemon off;'"

  # =============================================================================
  # MONITORING & UTILITIES
  # =============================================================================

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: school_timetable_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@school.edu}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - ./docker/pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - database_network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - development
      - tools

  # Redis Commander for Redis management (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: school_timetable_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin123}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    networks:
      - backend_network
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - development
      - tools 